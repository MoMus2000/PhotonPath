<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="154" onload="init(evt)" viewBox="0 0 1200 154" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="154" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python3 main.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="143.00"> </text><svg id="frames" x="10" width="1180" total_samples="114319"><g><title>&lt;module&gt; (main.py:232) (421 samples, 0.37%)</title><rect x="0.1006%" y="68" width="0.3683%" height="15" fill="rgb(227,0,7)" fg:x="115" fg:w="421"/><text x="0.3506%" y="78.50"></text></g><g><title>intersect (Triangle.py:24) (3,999 samples, 3.50%)</title><rect x="4.2478%" y="84" width="3.4981%" height="15" fill="rgb(217,0,24)" fg:x="4856" fg:w="3999"/><text x="4.4978%" y="94.50">int..</text></g><g><title>dot_product (Vector3D.py:35) (2,693 samples, 2.36%)</title><rect x="5.3902%" y="100" width="2.3557%" height="15" fill="rgb(221,193,54)" fg:x="6162" fg:w="2693"/><text x="5.6402%" y="110.50">d..</text></g><g><title>intersect (Triangle.py:26) (226 samples, 0.20%)</title><rect x="7.7459%" y="84" width="0.1977%" height="15" fill="rgb(248,212,6)" fg:x="8855" fg:w="226"/><text x="7.9959%" y="94.50"></text></g><g><title>__init__ (Vector3D.py:10) (383 samples, 0.34%)</title><rect x="15.2179%" y="116" width="0.3350%" height="15" fill="rgb(208,68,35)" fg:x="17397" fg:w="383"/><text x="15.4679%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (509 samples, 0.45%)</title><rect x="15.5897%" y="116" width="0.4452%" height="15" fill="rgb(232,128,0)" fg:x="17822" fg:w="509"/><text x="15.8397%" y="126.50"></text></g><g><title>__add__ (Vector3D.py:13) (4,717 samples, 4.13%)</title><rect x="12.2114%" y="100" width="4.1262%" height="15" fill="rgb(207,160,47)" fg:x="13960" fg:w="4717"/><text x="12.4614%" y="110.50">__ad..</text></g><g><title>__init__ (Vector3D.py:9) (346 samples, 0.30%)</title><rect x="16.0350%" y="116" width="0.3027%" height="15" fill="rgb(228,23,34)" fg:x="18331" fg:w="346"/><text x="16.2850%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:10) (405 samples, 0.35%)</title><rect x="18.2524%" y="116" width="0.3543%" height="15" fill="rgb(218,30,26)" fg:x="20866" fg:w="405"/><text x="18.5024%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (519 samples, 0.45%)</title><rect x="18.6618%" y="116" width="0.4540%" height="15" fill="rgb(220,122,19)" fg:x="21334" fg:w="519"/><text x="18.9118%" y="126.50"></text></g><g><title>__mul__ (Vector3D.py:16) (3,479 samples, 3.04%)</title><rect x="16.3849%" y="100" width="3.0432%" height="15" fill="rgb(250,228,42)" fg:x="18731" fg:w="3479"/><text x="16.6349%" y="110.50">__m..</text></g><g><title>__init__ (Vector3D.py:9) (357 samples, 0.31%)</title><rect x="19.1158%" y="116" width="0.3123%" height="15" fill="rgb(240,193,28)" fg:x="21853" fg:w="357"/><text x="19.3658%" y="126.50"></text></g><g><title>dot_product (Vector3D.py:35) (2,466 samples, 2.16%)</title><rect x="19.4815%" y="100" width="2.1571%" height="15" fill="rgb(216,20,37)" fg:x="22271" fg:w="2466"/><text x="19.7315%" y="110.50">d..</text></g><g><title>__init__ (Vector3D.py:10) (402 samples, 0.35%)</title><rect x="23.8272%" y="116" width="0.3516%" height="15" fill="rgb(206,188,39)" fg:x="27239" fg:w="402"/><text x="24.0772%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (525 samples, 0.46%)</title><rect x="24.2068%" y="116" width="0.4592%" height="15" fill="rgb(217,207,13)" fg:x="27673" fg:w="525"/><text x="24.4568%" y="126.50"></text></g><g><title>intersect (Triangle.py:29) (19,433 samples, 17.00%)</title><rect x="7.9436%" y="84" width="16.9989%" height="15" fill="rgb(231,73,38)" fg:x="9081" fg:w="19433"/><text x="8.1936%" y="94.50">intersect (Triangle.py:29)</text></g><g><title>negative (Vector3D.py:32) (3,727 samples, 3.26%)</title><rect x="21.6823%" y="100" width="3.2602%" height="15" fill="rgb(225,20,46)" fg:x="24787" fg:w="3727"/><text x="21.9323%" y="110.50">neg..</text></g><g><title>__init__ (Vector3D.py:9) (316 samples, 0.28%)</title><rect x="24.6661%" y="116" width="0.2764%" height="15" fill="rgb(210,31,41)" fg:x="28198" fg:w="316"/><text x="24.9161%" y="126.50"></text></g><g><title>intersect (Triangle.py:30) (486 samples, 0.43%)</title><rect x="24.9425%" y="84" width="0.4251%" height="15" fill="rgb(221,200,47)" fg:x="28514" fg:w="486"/><text x="25.1925%" y="94.50"></text></g><g><title>__init__ (Vector3D.py:10) (451 samples, 0.39%)</title><rect x="30.0221%" y="116" width="0.3945%" height="15" fill="rgb(226,26,5)" fg:x="34321" fg:w="451"/><text x="30.2721%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (472 samples, 0.41%)</title><rect x="30.4481%" y="116" width="0.4129%" height="15" fill="rgb(249,33,26)" fg:x="34808" fg:w="472"/><text x="30.6981%" y="126.50"></text></g><g><title>__add__ (Vector3D.py:13) (4,620 samples, 4.04%)</title><rect x="27.1442%" y="100" width="4.0413%" height="15" fill="rgb(235,183,28)" fg:x="31031" fg:w="4620"/><text x="27.3942%" y="110.50">__ad..</text></g><g><title>__init__ (Vector3D.py:9) (371 samples, 0.32%)</title><rect x="30.8610%" y="116" width="0.3245%" height="15" fill="rgb(221,5,38)" fg:x="35280" fg:w="371"/><text x="31.1110%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:10) (414 samples, 0.36%)</title><rect x="33.0479%" y="116" width="0.3621%" height="15" fill="rgb(247,18,42)" fg:x="37780" fg:w="414"/><text x="33.2979%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (453 samples, 0.40%)</title><rect x="33.4914%" y="116" width="0.3963%" height="15" fill="rgb(241,131,45)" fg:x="38287" fg:w="453"/><text x="33.7414%" y="126.50"></text></g><g><title>intersect (Triangle.py:32) (10,099 samples, 8.83%)</title><rect x="25.3676%" y="84" width="8.8341%" height="15" fill="rgb(249,31,29)" fg:x="29000" fg:w="10099"/><text x="25.6176%" y="94.50">intersect (T..</text></g><g><title>__mul__ (Vector3D.py:16) (3,403 samples, 2.98%)</title><rect x="31.2249%" y="100" width="2.9768%" height="15" fill="rgb(225,111,53)" fg:x="35696" fg:w="3403"/><text x="31.4749%" y="110.50">__m..</text></g><g><title>__init__ (Vector3D.py:9) (359 samples, 0.31%)</title><rect x="33.8876%" y="116" width="0.3140%" height="15" fill="rgb(238,160,17)" fg:x="38740" fg:w="359"/><text x="34.1376%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:10) (416 samples, 0.36%)</title><rect x="38.0952%" y="116" width="0.3639%" height="15" fill="rgb(214,148,48)" fg:x="43550" fg:w="416"/><text x="38.3452%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (541 samples, 0.47%)</title><rect x="38.5072%" y="116" width="0.4732%" height="15" fill="rgb(232,36,49)" fg:x="44021" fg:w="541"/><text x="38.7572%" y="126.50"></text></g><g><title>intersect (Triangle.py:34) (5,773 samples, 5.05%)</title><rect x="34.2017%" y="84" width="5.0499%" height="15" fill="rgb(209,103,24)" fg:x="39099" fg:w="5773"/><text x="34.4517%" y="94.50">inters..</text></g><g><title>__sub__ (Vector3D.py:19) (4,403 samples, 3.85%)</title><rect x="35.4001%" y="100" width="3.8515%" height="15" fill="rgb(229,88,8)" fg:x="40469" fg:w="4403"/><text x="35.6501%" y="110.50">__su..</text></g><g><title>__init__ (Vector3D.py:9) (310 samples, 0.27%)</title><rect x="38.9804%" y="116" width="0.2712%" height="15" fill="rgb(213,181,19)" fg:x="44562" fg:w="310"/><text x="39.2304%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:10) (371 samples, 0.32%)</title><rect x="43.0095%" y="116" width="0.3245%" height="15" fill="rgb(254,191,54)" fg:x="49168" fg:w="371"/><text x="43.2595%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (464 samples, 0.41%)</title><rect x="43.3891%" y="116" width="0.4059%" height="15" fill="rgb(241,83,37)" fg:x="49602" fg:w="464"/><text x="43.6391%" y="126.50"></text></g><g><title>intersect (Triangle.py:35) (5,522 samples, 4.83%)</title><rect x="39.2516%" y="84" width="4.8303%" height="15" fill="rgb(233,36,39)" fg:x="44872" fg:w="5522"/><text x="39.5016%" y="94.50">inters..</text></g><g><title>__sub__ (Vector3D.py:19) (4,558 samples, 3.99%)</title><rect x="40.0948%" y="100" width="3.9871%" height="15" fill="rgb(226,3,54)" fg:x="45836" fg:w="4558"/><text x="40.3448%" y="110.50">__su..</text></g><g><title>__init__ (Vector3D.py:9) (328 samples, 0.29%)</title><rect x="43.7950%" y="116" width="0.2869%" height="15" fill="rgb(245,192,40)" fg:x="50066" fg:w="328"/><text x="44.0450%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:10) (399 samples, 0.35%)</title><rect x="47.5765%" y="116" width="0.3490%" height="15" fill="rgb(238,167,29)" fg:x="54389" fg:w="399"/><text x="47.8265%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (507 samples, 0.44%)</title><rect x="47.9667%" y="116" width="0.4435%" height="15" fill="rgb(232,182,51)" fg:x="54835" fg:w="507"/><text x="48.2167%" y="126.50"></text></g><g><title>intersect (Triangle.py:37) (5,283 samples, 4.62%)</title><rect x="44.0819%" y="84" width="4.6213%" height="15" fill="rgb(231,60,39)" fg:x="50394" fg:w="5283"/><text x="44.3319%" y="94.50">inter..</text></g><g><title>__sub__ (Vector3D.py:19) (3,844 samples, 3.36%)</title><rect x="45.3407%" y="100" width="3.3625%" height="15" fill="rgb(208,69,12)" fg:x="51833" fg:w="3844"/><text x="45.5907%" y="110.50">__s..</text></g><g><title>__init__ (Vector3D.py:9) (335 samples, 0.29%)</title><rect x="48.4102%" y="116" width="0.2930%" height="15" fill="rgb(235,93,37)" fg:x="55342" fg:w="335"/><text x="48.6602%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:10) (433 samples, 0.38%)</title><rect x="52.5153%" y="116" width="0.3788%" height="15" fill="rgb(213,116,39)" fg:x="60035" fg:w="433"/><text x="52.7653%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (542 samples, 0.47%)</title><rect x="52.9588%" y="116" width="0.4741%" height="15" fill="rgb(222,207,29)" fg:x="60542" fg:w="542"/><text x="53.2088%" y="126.50"></text></g><g><title>intersect (Triangle.py:38) (5,780 samples, 5.06%)</title><rect x="48.7032%" y="84" width="5.0560%" height="15" fill="rgb(206,96,30)" fg:x="55677" fg:w="5780"/><text x="48.9532%" y="94.50">inters..</text></g><g><title>__sub__ (Vector3D.py:19) (4,845 samples, 4.24%)</title><rect x="49.5211%" y="100" width="4.2381%" height="15" fill="rgb(218,138,4)" fg:x="56612" fg:w="4845"/><text x="49.7711%" y="110.50">__sub..</text></g><g><title>__init__ (Vector3D.py:9) (373 samples, 0.33%)</title><rect x="53.4329%" y="116" width="0.3263%" height="15" fill="rgb(250,191,14)" fg:x="61084" fg:w="373"/><text x="53.6829%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:10) (381 samples, 0.33%)</title><rect x="57.3623%" y="116" width="0.3333%" height="15" fill="rgb(239,60,40)" fg:x="65576" fg:w="381"/><text x="57.6123%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (483 samples, 0.42%)</title><rect x="57.7314%" y="116" width="0.4225%" height="15" fill="rgb(206,27,48)" fg:x="65998" fg:w="483"/><text x="57.9814%" y="126.50"></text></g><g><title>intersect (Triangle.py:40) (5,364 samples, 4.69%)</title><rect x="53.7592%" y="84" width="4.6921%" height="15" fill="rgb(225,35,8)" fg:x="61457" fg:w="5364"/><text x="54.0092%" y="94.50">inter..</text></g><g><title>__sub__ (Vector3D.py:19) (3,994 samples, 3.49%)</title><rect x="54.9576%" y="100" width="3.4937%" height="15" fill="rgb(250,213,24)" fg:x="62827" fg:w="3994"/><text x="55.2076%" y="110.50">__s..</text></g><g><title>__init__ (Vector3D.py:9) (340 samples, 0.30%)</title><rect x="58.1539%" y="116" width="0.2974%" height="15" fill="rgb(247,123,22)" fg:x="66481" fg:w="340"/><text x="58.4039%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:10) (347 samples, 0.30%)</title><rect x="62.3203%" y="116" width="0.3035%" height="15" fill="rgb(231,138,38)" fg:x="71244" fg:w="347"/><text x="62.5703%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (583 samples, 0.51%)</title><rect x="62.6632%" y="116" width="0.5100%" height="15" fill="rgb(231,145,46)" fg:x="71636" fg:w="583"/><text x="62.9132%" y="126.50"></text></g><g><title>intersect (Triangle.py:41) (5,754 samples, 5.03%)</title><rect x="58.4514%" y="84" width="5.0333%" height="15" fill="rgb(251,118,11)" fg:x="66821" fg:w="5754"/><text x="58.7014%" y="94.50">inters..</text></g><g><title>__sub__ (Vector3D.py:19) (4,877 samples, 4.27%)</title><rect x="59.2185%" y="100" width="4.2661%" height="15" fill="rgb(217,147,25)" fg:x="67698" fg:w="4877"/><text x="59.4685%" y="110.50">__sub..</text></g><g><title>__init__ (Vector3D.py:9) (356 samples, 0.31%)</title><rect x="63.1732%" y="116" width="0.3114%" height="15" fill="rgb(247,81,37)" fg:x="72219" fg:w="356"/><text x="63.4232%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:10) (387 samples, 0.34%)</title><rect x="67.8995%" y="116" width="0.3385%" height="15" fill="rgb(209,12,38)" fg:x="77622" fg:w="387"/><text x="68.1495%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (424 samples, 0.37%)</title><rect x="68.2774%" y="116" width="0.3709%" height="15" fill="rgb(227,1,9)" fg:x="78054" fg:w="424"/><text x="68.5274%" y="126.50"></text></g><g><title>cross_product (Vector3D.py:38) (3,853 samples, 3.37%)</title><rect x="65.6068%" y="100" width="3.3704%" height="15" fill="rgb(248,47,43)" fg:x="75001" fg:w="3853"/><text x="65.8568%" y="110.50">cro..</text></g><g><title>__init__ (Vector3D.py:9) (376 samples, 0.33%)</title><rect x="68.6483%" y="116" width="0.3289%" height="15" fill="rgb(221,10,30)" fg:x="78478" fg:w="376"/><text x="68.8983%" y="126.50"></text></g><g><title>cross_product (Vector3D.py:39) (1,327 samples, 1.16%)</title><rect x="68.9772%" y="100" width="1.1608%" height="15" fill="rgb(210,229,1)" fg:x="78854" fg:w="1327"/><text x="69.2272%" y="110.50"></text></g><g><title>cross_product (Vector3D.py:40) (1,642 samples, 1.44%)</title><rect x="70.1379%" y="100" width="1.4363%" height="15" fill="rgb(222,148,37)" fg:x="80181" fg:w="1642"/><text x="70.3879%" y="110.50"></text></g><g><title>intersect (Triangle.py:43) (11,892 samples, 10.40%)</title><rect x="63.4846%" y="84" width="10.4025%" height="15" fill="rgb(234,67,33)" fg:x="72575" fg:w="11892"/><text x="63.7346%" y="94.50">intersect (Tria..</text></g><g><title>dot_product (Vector3D.py:35) (2,534 samples, 2.22%)</title><rect x="71.6705%" y="100" width="2.2166%" height="15" fill="rgb(247,98,35)" fg:x="81933" fg:w="2534"/><text x="71.9205%" y="110.50">d..</text></g><g><title>__init__ (Vector3D.py:10) (217 samples, 0.19%)</title><rect x="76.2148%" y="116" width="0.1898%" height="15" fill="rgb(247,138,52)" fg:x="87128" fg:w="217"/><text x="76.4648%" y="126.50"></text></g><g><title>__init__ (Vector3D.py:8) (276 samples, 0.24%)</title><rect x="76.4352%" y="116" width="0.2414%" height="15" fill="rgb(213,79,30)" fg:x="87380" fg:w="276"/><text x="76.6852%" y="126.50"></text></g><g><title>cross_product (Vector3D.py:38) (2,334 samples, 2.04%)</title><rect x="74.8021%" y="100" width="2.0417%" height="15" fill="rgb(246,177,23)" fg:x="85513" fg:w="2334"/><text x="75.0521%" y="110.50">c..</text></g><g><title>__init__ (Vector3D.py:9) (191 samples, 0.17%)</title><rect x="76.6767%" y="116" width="0.1671%" height="15" fill="rgb(230,62,27)" fg:x="87656" fg:w="191"/><text x="76.9267%" y="126.50"></text></g><g><title>cross_product (Vector3D.py:39) (929 samples, 0.81%)</title><rect x="76.8437%" y="100" width="0.8126%" height="15" fill="rgb(216,154,8)" fg:x="87847" fg:w="929"/><text x="77.0937%" y="110.50"></text></g><g><title>cross_product (Vector3D.py:40) (661 samples, 0.58%)</title><rect x="77.6564%" y="100" width="0.5782%" height="15" fill="rgb(244,35,45)" fg:x="88776" fg:w="661"/><text x="77.9064%" y="110.50"></text></g><g><title>intersect (Triangle.py:44) (6,490 samples, 5.68%)</title><rect x="73.8871%" y="84" width="5.6771%" height="15" fill="rgb(251,115,12)" fg:x="84467" fg:w="6490"/><text x="74.1371%" y="94.50">interse..</text></g><g><title>dot_product (Vector3D.py:35) (1,481 samples, 1.30%)</title><rect x="78.2687%" y="100" width="1.2955%" height="15" fill="rgb(240,54,50)" fg:x="89476" fg:w="1481"/><text x="78.5187%" y="110.50"></text></g><g><title>cross_product (Vector3D.py:38) (679 samples, 0.59%)</title><rect x="79.9124%" y="100" width="0.5940%" height="15" fill="rgb(233,84,52)" fg:x="91355" fg:w="679"/><text x="80.1624%" y="110.50"></text></g><g><title>cross_product (Vector3D.py:39) (207 samples, 0.18%)</title><rect x="80.5063%" y="100" width="0.1811%" height="15" fill="rgb(207,117,47)" fg:x="92034" fg:w="207"/><text x="80.7563%" y="110.50"></text></g><g><title>cross_product (Vector3D.py:40) (296 samples, 0.26%)</title><rect x="80.6874%" y="100" width="0.2589%" height="15" fill="rgb(249,43,39)" fg:x="92241" fg:w="296"/><text x="80.9374%" y="110.50"></text></g><g><title>intersect (Triangle.py:45) (1,972 samples, 1.72%)</title><rect x="79.5642%" y="84" width="1.7250%" height="15" fill="rgb(209,38,44)" fg:x="90957" fg:w="1972"/><text x="79.8142%" y="94.50"></text></g><g><title>dot_product (Vector3D.py:35) (390 samples, 0.34%)</title><rect x="80.9480%" y="100" width="0.3412%" height="15" fill="rgb(236,212,23)" fg:x="92539" fg:w="390"/><text x="81.1980%" y="110.50"></text></g><g><title>intersect (Triangle.py:47) (184 samples, 0.16%)</title><rect x="81.2892%" y="84" width="0.1610%" height="15" fill="rgb(242,79,21)" fg:x="92929" fg:w="184"/><text x="81.5392%" y="94.50"></text></g><g><title>&lt;module&gt; (main.py:233) (92,604 samples, 81.00%)</title><rect x="0.4689%" y="68" width="81.0049%" height="15" fill="rgb(211,96,35)" fg:x="536" fg:w="92604"/><text x="0.7189%" y="78.50">&lt;module&gt; (main.py:233)</text></g><g><title>closest_object_index (RayTracer.py:18) (124 samples, 0.11%)</title><rect x="81.4746%" y="84" width="0.1085%" height="15" fill="rgb(253,215,40)" fg:x="93141" fg:w="124"/><text x="81.7246%" y="94.50"></text></g><g><title>closest_object_index (RayTracer.py:19) (420 samples, 0.37%)</title><rect x="81.5831%" y="84" width="0.3674%" height="15" fill="rgb(211,81,21)" fg:x="93265" fg:w="420"/><text x="81.8331%" y="94.50"></text></g><g><title>closest_object_index (RayTracer.py:23) (117 samples, 0.10%)</title><rect x="81.9505%" y="84" width="0.1023%" height="15" fill="rgb(208,190,38)" fg:x="93685" fg:w="117"/><text x="82.2005%" y="94.50"></text></g><g><title>&lt;module&gt; (main.py:235) (1,125 samples, 0.98%)</title><rect x="81.4738%" y="68" width="0.9841%" height="15" fill="rgb(235,213,38)" fg:x="93140" fg:w="1125"/><text x="81.7238%" y="78.50"></text></g><g><title>closest_object_index (RayTracer.py:24) (463 samples, 0.41%)</title><rect x="82.0529%" y="84" width="0.4050%" height="15" fill="rgb(237,122,38)" fg:x="93802" fg:w="463"/><text x="82.3029%" y="94.50"></text></g><g><title>&lt;module&gt; (main.py:247) (19,999 samples, 17.49%)</title><rect x="82.4675%" y="68" width="17.4940%" height="15" fill="rgb(244,218,35)" fg:x="94276" fg:w="19999"/><text x="82.7175%" y="78.50">&lt;module&gt; (main.py:247)</text></g><g><title>color_at (RayTracer.py:34) (19,993 samples, 17.49%)</title><rect x="82.4727%" y="84" width="17.4888%" height="15" fill="rgb(240,68,47)" fg:x="94282" fg:w="19993"/><text x="82.7227%" y="94.50">color_at (RayTracer.py:34)</text></g><g><title>all (114,319 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="114319"/><text x="0.2500%" y="62.50"></text></g></svg></svg>