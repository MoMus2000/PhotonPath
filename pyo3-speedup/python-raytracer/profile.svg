<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="378" onload="init(evt)" viewBox="0 0 1200 378" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="378" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -o profile.svg -- python3 render_scene.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="367.00"> </text><svg id="frames" x="10" width="1180" total_samples="3992"><g><title>&lt;module&gt; (render_scene.py:122) (55 samples, 1.38%)</title><rect x="0.0000%" y="68" width="1.3778%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="55"/><text x="0.2500%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:123) (177 samples, 4.43%)</title><rect x="1.3778%" y="68" width="4.4339%" height="15" fill="rgb(217,0,24)" fg:x="55" fg:w="177"/><text x="1.6278%" y="78.50">&lt;modu..</text></g><g><title>&lt;module&gt; (render_scene.py:124) (64 samples, 1.60%)</title><rect x="5.8116%" y="68" width="1.6032%" height="15" fill="rgb(221,193,54)" fg:x="232" fg:w="64"/><text x="6.0616%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:125) (64 samples, 1.60%)</title><rect x="7.4148%" y="68" width="1.6032%" height="15" fill="rgb(248,212,6)" fg:x="296" fg:w="64"/><text x="7.6648%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:127) (55 samples, 1.38%)</title><rect x="9.0180%" y="68" width="1.3778%" height="15" fill="rgb(208,68,35)" fg:x="360" fg:w="55"/><text x="9.2680%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:130) (31 samples, 0.78%)</title><rect x="10.3958%" y="68" width="0.7766%" height="15" fill="rgb(232,128,0)" fg:x="415" fg:w="31"/><text x="10.6458%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:131) (137 samples, 3.43%)</title><rect x="11.1723%" y="68" width="3.4319%" height="15" fill="rgb(207,160,47)" fg:x="446" fg:w="137"/><text x="11.4223%" y="78.50">&lt;mo..</text></g><g><title>&lt;module&gt; (render_scene.py:132) (747 samples, 18.71%)</title><rect x="14.6042%" y="68" width="18.7124%" height="15" fill="rgb(228,23,34)" fg:x="583" fg:w="747"/><text x="14.8542%" y="78.50">&lt;module&gt; (render_scene.py:132)</text></g><g><title>closest_object_index (RayTracer.py:11) (16 samples, 0.40%)</title><rect x="34.2685%" y="84" width="0.4008%" height="15" fill="rgb(218,30,26)" fg:x="1368" fg:w="16"/><text x="34.5185%" y="94.50"></text></g><g><title>closest_object_index (RayTracer.py:16) (66 samples, 1.65%)</title><rect x="34.6944%" y="84" width="1.6533%" height="15" fill="rgb(220,122,19)" fg:x="1385" fg:w="66"/><text x="34.9444%" y="94.50"></text></g><g><title>closest_object_index (RayTracer.py:17) (108 samples, 2.71%)</title><rect x="36.3477%" y="84" width="2.7054%" height="15" fill="rgb(250,228,42)" fg:x="1451" fg:w="108"/><text x="36.5977%" y="94.50">cl..</text></g><g><title>closest_object_index (RayTracer.py:18) (9 samples, 0.23%)</title><rect x="39.0531%" y="84" width="0.2255%" height="15" fill="rgb(240,193,28)" fg:x="1559" fg:w="9"/><text x="39.3031%" y="94.50"></text></g><g><title>closest_object_index (RayTracer.py:20) (6 samples, 0.15%)</title><rect x="39.2786%" y="84" width="0.1503%" height="15" fill="rgb(216,20,37)" fg:x="1568" fg:w="6"/><text x="39.5286%" y="94.50"></text></g><g><title>closest_object_index (RayTracer.py:21) (69 samples, 1.73%)</title><rect x="39.4289%" y="84" width="1.7285%" height="15" fill="rgb(206,188,39)" fg:x="1574" fg:w="69"/><text x="39.6789%" y="94.50"></text></g><g><title>closest_object_index (RayTracer.py:22) (146 samples, 3.66%)</title><rect x="41.1573%" y="84" width="3.6573%" height="15" fill="rgb(217,207,13)" fg:x="1643" fg:w="146"/><text x="41.4073%" y="94.50">clos..</text></g><g><title>closest_object_index (RayTracer.py:23) (14 samples, 0.35%)</title><rect x="44.8146%" y="84" width="0.3507%" height="15" fill="rgb(231,73,38)" fg:x="1789" fg:w="14"/><text x="45.0646%" y="94.50"></text></g><g><title>&lt;module&gt; (render_scene.py:134) (492 samples, 12.32%)</title><rect x="33.3166%" y="68" width="12.3246%" height="15" fill="rgb(225,20,46)" fg:x="1330" fg:w="492"/><text x="33.5666%" y="78.50">&lt;module&gt; (render_s..</text></g><g><title>closest_object_index (RayTracer.py:9) (17 samples, 0.43%)</title><rect x="45.2154%" y="84" width="0.4259%" height="15" fill="rgb(210,31,41)" fg:x="1805" fg:w="17"/><text x="45.4654%" y="94.50"></text></g><g><title>&lt;module&gt; (render_scene.py:137) (10 samples, 0.25%)</title><rect x="45.6413%" y="68" width="0.2505%" height="15" fill="rgb(221,200,47)" fg:x="1822" fg:w="10"/><text x="45.8913%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:142) (14 samples, 0.35%)</title><rect x="45.8918%" y="68" width="0.3507%" height="15" fill="rgb(226,26,5)" fg:x="1832" fg:w="14"/><text x="46.1418%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:143) (161 samples, 4.03%)</title><rect x="46.2425%" y="68" width="4.0331%" height="15" fill="rgb(249,33,26)" fg:x="1846" fg:w="161"/><text x="46.4925%" y="78.50">&lt;mod..</text></g><g><title>&lt;module&gt; (render_scene.py:144) (16 samples, 0.40%)</title><rect x="50.2756%" y="68" width="0.4008%" height="15" fill="rgb(235,183,28)" fg:x="2007" fg:w="16"/><text x="50.5256%" y="78.50"></text></g><g><title>color_at (RayTracer.py:32) (21 samples, 0.53%)</title><rect x="52.5301%" y="84" width="0.5261%" height="15" fill="rgb(221,5,38)" fg:x="2097" fg:w="21"/><text x="52.7801%" y="94.50"></text></g><g><title>color_at (RayTracer.py:34) (528 samples, 13.23%)</title><rect x="53.0561%" y="84" width="13.2265%" height="15" fill="rgb(247,18,42)" fg:x="2118" fg:w="528"/><text x="53.3061%" y="94.50">color_at (RayTracer...</text></g><g><title>color_at (RayTracer.py:35) (57 samples, 1.43%)</title><rect x="66.2826%" y="84" width="1.4279%" height="15" fill="rgb(241,131,45)" fg:x="2646" fg:w="57"/><text x="66.5326%" y="94.50"></text></g><g><title>&lt;module&gt; (render_scene.py:146) (684 samples, 17.13%)</title><rect x="50.6764%" y="68" width="17.1343%" height="15" fill="rgb(249,31,29)" fg:x="2023" fg:w="684"/><text x="50.9264%" y="78.50">&lt;module&gt; (render_scene.py:1..</text></g><g><title>color_at (RayTracer.py:38) (4 samples, 0.10%)</title><rect x="67.7104%" y="84" width="0.1002%" height="15" fill="rgb(225,111,53)" fg:x="2703" fg:w="4"/><text x="67.9604%" y="94.50"></text></g><g><title>&lt;module&gt; (render_scene.py:147) (6 samples, 0.15%)</title><rect x="67.8106%" y="68" width="0.1503%" height="15" fill="rgb(238,160,17)" fg:x="2707" fg:w="6"/><text x="68.0606%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:148) (8 samples, 0.20%)</title><rect x="67.9609%" y="68" width="0.2004%" height="15" fill="rgb(214,148,48)" fg:x="2713" fg:w="8"/><text x="68.2109%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:150) (59 samples, 1.48%)</title><rect x="68.1613%" y="68" width="1.4780%" height="15" fill="rgb(232,36,49)" fg:x="2721" fg:w="59"/><text x="68.4113%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:151) (55 samples, 1.38%)</title><rect x="69.6393%" y="68" width="1.3778%" height="15" fill="rgb(209,103,24)" fg:x="2780" fg:w="55"/><text x="69.8893%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:152) (51 samples, 1.28%)</title><rect x="71.0170%" y="68" width="1.2776%" height="15" fill="rgb(229,88,8)" fg:x="2835" fg:w="51"/><text x="71.2670%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:154) (44 samples, 1.10%)</title><rect x="72.2946%" y="68" width="1.1022%" height="15" fill="rgb(213,181,19)" fg:x="2886" fg:w="44"/><text x="72.5446%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:155) (45 samples, 1.13%)</title><rect x="73.3968%" y="68" width="1.1273%" height="15" fill="rgb(254,191,54)" fg:x="2930" fg:w="45"/><text x="73.6468%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:156) (56 samples, 1.40%)</title><rect x="74.5240%" y="68" width="1.4028%" height="15" fill="rgb(241,83,37)" fg:x="2975" fg:w="56"/><text x="74.7740%" y="78.50"></text></g><g><title>putpixel (PIL/Image.py:1973) (4 samples, 0.10%)</title><rect x="78.4820%" y="84" width="0.1002%" height="15" fill="rgb(233,36,39)" fg:x="3133" fg:w="4"/><text x="78.7320%" y="94.50"></text></g><g><title>load (PIL/Image.py:814) (5 samples, 0.13%)</title><rect x="79.1583%" y="100" width="0.1253%" height="15" fill="rgb(226,3,54)" fg:x="3160" fg:w="5"/><text x="79.4083%" y="110.50"></text></g><g><title>load (PIL/Image.py:829) (25 samples, 0.63%)</title><rect x="79.2836%" y="100" width="0.6263%" height="15" fill="rgb(245,192,40)" fg:x="3165" fg:w="25"/><text x="79.5336%" y="110.50"></text></g><g><title>load (PIL/Image.py:846) (10 samples, 0.25%)</title><rect x="79.9098%" y="100" width="0.2505%" height="15" fill="rgb(238,167,29)" fg:x="3190" fg:w="10"/><text x="80.1598%" y="110.50"></text></g><g><title>load (PIL/Image.py:847) (10 samples, 0.25%)</title><rect x="80.1603%" y="100" width="0.2505%" height="15" fill="rgb(232,182,51)" fg:x="3200" fg:w="10"/><text x="80.4103%" y="110.50"></text></g><g><title>putpixel (PIL/Image.py:1975) (107 samples, 2.68%)</title><rect x="78.5822%" y="84" width="2.6804%" height="15" fill="rgb(231,60,39)" fg:x="3137" fg:w="107"/><text x="78.8322%" y="94.50">pu..</text></g><g><title>load (PIL/Image.py:855) (34 samples, 0.85%)</title><rect x="80.4108%" y="100" width="0.8517%" height="15" fill="rgb(208,69,12)" fg:x="3210" fg:w="34"/><text x="80.6608%" y="110.50"></text></g><g><title>putpixel (PIL/Image.py:1977) (6 samples, 0.15%)</title><rect x="81.2625%" y="84" width="0.1503%" height="15" fill="rgb(235,93,37)" fg:x="3244" fg:w="6"/><text x="81.5125%" y="94.50"></text></g><g><title>putpixel (PIL/Image.py:1981) (28 samples, 0.70%)</title><rect x="81.4128%" y="84" width="0.7014%" height="15" fill="rgb(213,116,39)" fg:x="3250" fg:w="28"/><text x="81.6628%" y="94.50"></text></g><g><title>mode (PIL/Image.py:509) (9 samples, 0.23%)</title><rect x="81.8888%" y="100" width="0.2255%" height="15" fill="rgb(222,207,29)" fg:x="3269" fg:w="9"/><text x="82.1388%" y="110.50"></text></g><g><title>&lt;module&gt; (render_scene.py:158) (320 samples, 8.02%)</title><rect x="75.9269%" y="68" width="8.0160%" height="15" fill="rgb(206,96,30)" fg:x="3031" fg:w="320"/><text x="76.1769%" y="78.50">&lt;module&gt; (r..</text></g><g><title>putpixel (PIL/Image.py:1992) (73 samples, 1.83%)</title><rect x="82.1142%" y="84" width="1.8287%" height="15" fill="rgb(218,138,4)" fg:x="3278" fg:w="73"/><text x="82.3642%" y="94.50">p..</text></g><g><title>&lt;module&gt; (render_scene.py:159) (71 samples, 1.78%)</title><rect x="83.9429%" y="68" width="1.7786%" height="15" fill="rgb(250,191,14)" fg:x="3351" fg:w="71"/><text x="84.1929%" y="78.50">&lt;..</text></g><g><title>&lt;module&gt; (render_scene.py:160) (62 samples, 1.55%)</title><rect x="85.7214%" y="68" width="1.5531%" height="15" fill="rgb(239,60,40)" fg:x="3422" fg:w="62"/><text x="85.9714%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:162) (33 samples, 0.83%)</title><rect x="87.2745%" y="68" width="0.8267%" height="15" fill="rgb(206,27,48)" fg:x="3484" fg:w="33"/><text x="87.5245%" y="78.50"></text></g><g><title>save (PIL/Image.py:2438) (32 samples, 0.80%)</title><rect x="87.2996%" y="84" width="0.8016%" height="15" fill="rgb(225,35,8)" fg:x="3485" fg:w="32"/><text x="87.5496%" y="94.50"></text></g><g><title>_save (PIL/PngImagePlugin.py:1394) (32 samples, 0.80%)</title><rect x="87.2996%" y="100" width="0.8016%" height="15" fill="rgb(250,213,24)" fg:x="3485" fg:w="32"/><text x="87.5496%" y="110.50"></text></g><g><title>_save (PIL/ImageFile.py:519) (32 samples, 0.80%)</title><rect x="87.2996%" y="116" width="0.8016%" height="15" fill="rgb(247,123,22)" fg:x="3485" fg:w="32"/><text x="87.5496%" y="126.50"></text></g><g><title>_encode_tile (PIL/ImageFile.py:538) (32 samples, 0.80%)</title><rect x="87.2996%" y="132" width="0.8016%" height="15" fill="rgb(231,138,38)" fg:x="3485" fg:w="32"/><text x="87.5496%" y="142.50"></text></g><g><title>__str__ (tqdm/std.py:1165) (4 samples, 0.10%)</title><rect x="88.1764%" y="148" width="0.1002%" height="15" fill="rgb(231,145,46)" fg:x="3520" fg:w="4"/><text x="88.4264%" y="158.50"></text></g><g><title>__iter__ (tqdm/std.py:1205) (6 samples, 0.15%)</title><rect x="88.1513%" y="84" width="0.1503%" height="15" fill="rgb(251,118,11)" fg:x="3519" fg:w="6"/><text x="88.4013%" y="94.50"></text></g><g><title>update (tqdm/std.py:1256) (6 samples, 0.15%)</title><rect x="88.1513%" y="100" width="0.1503%" height="15" fill="rgb(217,147,25)" fg:x="3519" fg:w="6"/><text x="88.4013%" y="110.50"></text></g><g><title>refresh (tqdm/std.py:1361) (5 samples, 0.13%)</title><rect x="88.1764%" y="116" width="0.1253%" height="15" fill="rgb(247,81,37)" fg:x="3520" fg:w="5"/><text x="88.4264%" y="126.50"></text></g><g><title>display (tqdm/std.py:1509) (5 samples, 0.13%)</title><rect x="88.1764%" y="132" width="0.1253%" height="15" fill="rgb(209,12,38)" fg:x="3520" fg:w="5"/><text x="88.4264%" y="142.50"></text></g><g><title>create_mp_lock (tqdm/std.py:122) (5 samples, 0.13%)</title><rect x="88.3016%" y="132" width="0.1253%" height="15" fill="rgb(227,1,9)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="142.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (5 samples, 0.13%)</title><rect x="88.3016%" y="148" width="0.1253%" height="15" fill="rgb(248,47,43)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="158.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (5 samples, 0.13%)</title><rect x="88.3016%" y="164" width="0.1253%" height="15" fill="rgb(221,10,30)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="174.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (5 samples, 0.13%)</title><rect x="88.3016%" y="180" width="0.1253%" height="15" fill="rgb(210,229,1)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="190.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (5 samples, 0.13%)</title><rect x="88.3016%" y="196" width="0.1253%" height="15" fill="rgb(222,148,37)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="206.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (5 samples, 0.13%)</title><rect x="88.3016%" y="212" width="0.1253%" height="15" fill="rgb(234,67,33)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="222.50"></text></g><g><title>&lt;module&gt; (multiprocessing/__init__.py:16) (5 samples, 0.13%)</title><rect x="88.3016%" y="228" width="0.1253%" height="15" fill="rgb(247,98,35)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="238.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1058) (5 samples, 0.13%)</title><rect x="88.3016%" y="244" width="0.1253%" height="15" fill="rgb(247,138,52)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="254.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (5 samples, 0.13%)</title><rect x="88.3016%" y="260" width="0.1253%" height="15" fill="rgb(213,79,30)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1007) (5 samples, 0.13%)</title><rect x="88.3016%" y="276" width="0.1253%" height="15" fill="rgb(246,177,23)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:986) (5 samples, 0.13%)</title><rect x="88.3016%" y="292" width="0.1253%" height="15" fill="rgb(230,62,27)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:680) (5 samples, 0.13%)</title><rect x="88.3016%" y="308" width="0.1253%" height="15" fill="rgb(216,154,8)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:850) (5 samples, 0.13%)</title><rect x="88.3016%" y="324" width="0.1253%" height="15" fill="rgb(244,35,45)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:228) (5 samples, 0.13%)</title><rect x="88.3016%" y="340" width="0.1253%" height="15" fill="rgb(251,115,12)" fg:x="3525" fg:w="5"/><text x="88.5516%" y="350.50"></text></g><g><title>&lt;module&gt; (render_scene.py:86) (13 samples, 0.33%)</title><rect x="88.1513%" y="68" width="0.3257%" height="15" fill="rgb(240,54,50)" fg:x="3519" fg:w="13"/><text x="88.4013%" y="78.50"></text></g><g><title>__new__ (tqdm/std.py:562) (7 samples, 0.18%)</title><rect x="88.3016%" y="84" width="0.1754%" height="15" fill="rgb(233,84,52)" fg:x="3525" fg:w="7"/><text x="88.5516%" y="94.50"></text></g><g><title>get_lock (tqdm/std.py:661) (7 samples, 0.18%)</title><rect x="88.3016%" y="100" width="0.1754%" height="15" fill="rgb(207,117,47)" fg:x="3525" fg:w="7"/><text x="88.5516%" y="110.50"></text></g><g><title>__init__ (tqdm/std.py:99) (7 samples, 0.18%)</title><rect x="88.3016%" y="116" width="0.1754%" height="15" fill="rgb(249,43,39)" fg:x="3525" fg:w="7"/><text x="88.5516%" y="126.50"></text></g><g><title>&lt;module&gt; (render_scene.py:87) (8 samples, 0.20%)</title><rect x="88.4770%" y="68" width="0.2004%" height="15" fill="rgb(209,38,44)" fg:x="3532" fg:w="8"/><text x="88.7270%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:88) (56 samples, 1.40%)</title><rect x="88.6774%" y="68" width="1.4028%" height="15" fill="rgb(236,212,23)" fg:x="3540" fg:w="56"/><text x="88.9274%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:89) (39 samples, 0.98%)</title><rect x="90.0802%" y="68" width="0.9770%" height="15" fill="rgb(242,79,21)" fg:x="3596" fg:w="39"/><text x="90.3302%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:90) (53 samples, 1.33%)</title><rect x="91.0571%" y="68" width="1.3277%" height="15" fill="rgb(211,96,35)" fg:x="3635" fg:w="53"/><text x="91.3071%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:92) (72 samples, 1.80%)</title><rect x="92.3848%" y="68" width="1.8036%" height="15" fill="rgb(253,215,40)" fg:x="3688" fg:w="72"/><text x="92.6348%" y="78.50">&lt;..</text></g><g><title>&lt;module&gt; (render_scene.py:93) (42 samples, 1.05%)</title><rect x="94.1884%" y="68" width="1.0521%" height="15" fill="rgb(211,81,21)" fg:x="3760" fg:w="42"/><text x="94.4384%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:94) (33 samples, 0.83%)</title><rect x="95.2405%" y="68" width="0.8267%" height="15" fill="rgb(208,190,38)" fg:x="3802" fg:w="33"/><text x="95.4905%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:96) (17 samples, 0.43%)</title><rect x="96.0671%" y="68" width="0.4259%" height="15" fill="rgb(235,213,38)" fg:x="3835" fg:w="17"/><text x="96.3171%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:97) (15 samples, 0.38%)</title><rect x="96.4930%" y="68" width="0.3758%" height="15" fill="rgb(237,122,38)" fg:x="3852" fg:w="15"/><text x="96.7430%" y="78.50"></text></g><g><title>&lt;module&gt; (render_scene.py:98) (87 samples, 2.18%)</title><rect x="96.8687%" y="68" width="2.1794%" height="15" fill="rgb(244,218,35)" fg:x="3867" fg:w="87"/><text x="97.1187%" y="78.50">&lt;..</text></g><g><title>all (3,992 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="3992"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (render_scene.py:99) (38 samples, 0.95%)</title><rect x="99.0481%" y="68" width="0.9519%" height="15" fill="rgb(210,16,53)" fg:x="3954" fg:w="38"/><text x="99.2981%" y="78.50"></text></g></svg></svg>